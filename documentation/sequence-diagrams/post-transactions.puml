@startuml
actor View as F
participant ThymeleafEngine as T
participant Service as S
participant Database as DB

F -> S: POST /transactions
note right
{
    fromAccountNumber: some-uuid,
    toAccountNumber: some-uuid,
    description: some description
    amount: 50.00
}
end note
S -> DB: getAccountsByIds(fromAccountNumber, toAccountNumber)
DB --> S: [account, account]
alt unknown account
    S -> S: throw error
    S --> T: error page
    T --> F: error page
end
alt transaction is possible
    S -> S: update amounts for accounts
    S -> DB: Persist new amounts
    DB --> S
    S -> S: result = SUCCESSFUL
else insufficient funds
    S -> S: result = INSUFFICIENT_FUNDS
end
S --> T: result
T --> F: transaction result page
@enduml
